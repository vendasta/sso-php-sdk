<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sso/v1/service_provider.proto

namespace Sso\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The service context is used to determine which identity provider to use. This context is used in conjunction with
 * the identity context, provided by the identity provider. The two contexts require domain logic to be glued together; 
 * for example, when the service provider provides an account, we can determine the partner from that account, then 
 * match that up to an identity provider Partner context.
 * </pre>
 *
 * Protobuf type <code>sso.v1.ServiceContext</code>
 */
class ServiceContext extends \Google\Protobuf\Internal\Message
{
    protected $context;

    public function __construct() {
        \GPBMetadata\Sso\V1\ServiceProvider::initOnce();
        parent::__construct();
    }

    /**
     * <code>.sso.v1.ServiceContext.Account account = 1;</code>
     */
    public function getAccount()
    {
        return $this->readOneof(1);
    }

    /**
     * <code>.sso.v1.ServiceContext.Account account = 1;</code>
     */
    public function setAccount(&$var)
    {
        GPBUtil::checkMessage($var, \Sso\V1\ServiceContext_Account::class);
        $this->writeOneof(1, $var);
    }

    /**
     * <code>.sso.v1.ServiceContext.Partner partner = 2;</code>
     */
    public function getPartner()
    {
        return $this->readOneof(2);
    }

    /**
     * <code>.sso.v1.ServiceContext.Partner partner = 2;</code>
     */
    public function setPartner(&$var)
    {
        GPBUtil::checkMessage($var, \Sso\V1\ServiceContext_Partner::class);
        $this->writeOneof(2, $var);
    }

    /**
     * <code>.sso.v1.ServiceContext.SuperAdmin super_admin = 3;</code>
     */
    public function getSuperAdmin()
    {
        return $this->readOneof(3);
    }

    /**
     * <code>.sso.v1.ServiceContext.SuperAdmin super_admin = 3;</code>
     */
    public function setSuperAdmin(&$var)
    {
        GPBUtil::checkMessage($var, \Sso\V1\ServiceContext_SuperAdmin::class);
        $this->writeOneof(3, $var);
    }

    public function getContext()
    {
        return $this->whichOneof("context");
    }

}

